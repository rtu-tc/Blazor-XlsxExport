@using ClosedXML.Excel;
@using RtuTc.BlazorXlsxExport.Options;

@implements IDisposable
@implements IXlsxSheet

@if (ChildContent is not null && Table is not null)
{
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
}
@code {
    [Parameter, EditorRequired]
    public string Name { get; set; } = "data";
    string IXlsxSheet.Name => Name;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    public XlsxTable? Table { get; set; }

    private List<IOnSheetContent> onSheetContents = new();
    private List<XlsxSheetOption> options = new();

    internal TimeSpan Delay => Table?.Delay ?? TimeSpan.FromMilliseconds(10);

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            Table?.AddSheet(this);
        }
    }

    async Task IXlsxSheet.AddSheetToWorkbook(XLWorkbook workbook)
    {
        var sheet = workbook.Worksheets.Add(XLHelper.CreateSafeSheetName(Name));
        var rowIndex = 1;
        var columnIndex = 1;

        foreach (var content in onSheetContents)
        {
            (rowIndex, columnIndex) = await content.RenderContent(sheet, rowIndex, columnIndex);
            await Task.Delay(Delay);
        }
        await Task.Delay(Delay);

        foreach (var option in options)
        {
            option.ApplyOption(sheet);
        }
    }

    internal void AddContent(IOnSheetContent column)
    {
        onSheetContents.Add(column);
    }
    internal void RemoveContent(IOnSheetContent column)
    {
        onSheetContents.Remove(column);
    }
    internal void AddOption(XlsxSheetOption option)
    {
        options.Add(option);
    }
    internal void RemoveOption(XlsxSheetOption option)
    {
        options.Remove(option);
    }

    public void Dispose()
    {
        Table?.RemoveSheet(this);
    }
}